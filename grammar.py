"""Classes to represent the grammar of a language."""


class Terminal(object):
    """Represents a terminal in the grammar.

    A terminal is something that appears in a string generated by the grammar.
    For example, in Python, the string "raise" might be a terminal. These are
    the deepest nodes the the AST, and what you actually see in grammar being
    parsed.

    Typically, a lexer would output these, to feed them into a parser.
    """

    def __init__(self, text, is_literal=True):
        self.name = text
        self.is_literal = is_literal

    def __str__(self):
        if self.is_literal:
            return '"{}"'.format(self.name.replace('"', '""'))
        else:
            return '?{}?'.format(self.name.replace('?', '??'))

    def __repr__(self):
        return '{}.{}({!r})'.format(
                self.__module__, type(self).__name__, self.name)


class NonTerminal(object):
    def __init__(self, name):
        self.name = name

    def __str__(self):
        visual_name = self.name
        visual_name = visual_name.replace('\\', '\\\\')
        visual_name = self.name.replace('<', '\\<').replace('>', '\\>')
        return '<{0}>'.format(visual_name)

    def __repr__(self):
        return '{}.{}({!r})'.format(
                self.__module__, type(self).__name__,
                self.name)
